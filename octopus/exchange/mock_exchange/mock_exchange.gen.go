// Code generated by MockGen. DO NOT EDIT.
// Source: clickyab.com/exchange/octopus/exchange (interfaces: Impression,Demand,Publisher,Location,Supplier)

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	exchange "clickyab.com/exchange/octopus/exchange"
	context "context"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockImpression is a mock of Impression interface
type MockImpression struct {
	ctrl     *gomock.Controller
	recorder *MockImpressionMockRecorder
}

// MockImpressionMockRecorder is the mock recorder for MockImpression
type MockImpressionMockRecorder struct {
	mock *MockImpression
}

// NewMockImpression creates a new mock instance
func NewMockImpression(ctrl *gomock.Controller) *MockImpression {
	mock := &MockImpression{ctrl: ctrl}
	mock.recorder = &MockImpressionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImpression) EXPECT() *MockImpressionMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockImpression) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockImpressionMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockImpression)(nil).Attributes))
}

// Banner mocks base method
func (m *MockImpression) Banner() exchange.Banner {
	ret := m.ctrl.Call(m, "Banner")
	ret0, _ := ret[0].(exchange.Banner)
	return ret0
}

// Banner indicates an expected call of Banner
func (mr *MockImpressionMockRecorder) Banner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Banner", reflect.TypeOf((*MockImpression)(nil).Banner))
}

// BidFloor mocks base method
func (m *MockImpression) BidFloor() float64 {
	ret := m.ctrl.Call(m, "BidFloor")
	ret0, _ := ret[0].(float64)
	return ret0
}

// BidFloor indicates an expected call of BidFloor
func (mr *MockImpressionMockRecorder) BidFloor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BidFloor", reflect.TypeOf((*MockImpression)(nil).BidFloor))
}

// ID mocks base method
func (m *MockImpression) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockImpressionMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockImpression)(nil).ID))
}

// Native mocks base method
func (m *MockImpression) Native() exchange.Native {
	ret := m.ctrl.Call(m, "Native")
	ret0, _ := ret[0].(exchange.Native)
	return ret0
}

// Native indicates an expected call of Native
func (mr *MockImpressionMockRecorder) Native() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Native", reflect.TypeOf((*MockImpression)(nil).Native))
}

// Secure mocks base method
func (m *MockImpression) Secure() bool {
	ret := m.ctrl.Call(m, "Secure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Secure indicates an expected call of Secure
func (mr *MockImpressionMockRecorder) Secure() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secure", reflect.TypeOf((*MockImpression)(nil).Secure))
}

// Type mocks base method
func (m *MockImpression) Type() exchange.ImpressionType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(exchange.ImpressionType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockImpressionMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockImpression)(nil).Type))
}

// Video mocks base method
func (m *MockImpression) Video() exchange.Video {
	ret := m.ctrl.Call(m, "Video")
	ret0, _ := ret[0].(exchange.Video)
	return ret0
}

// Video indicates an expected call of Video
func (mr *MockImpressionMockRecorder) Video() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Video", reflect.TypeOf((*MockImpression)(nil).Video))
}

// MockDemand is a mock of Demand interface
type MockDemand struct {
	ctrl     *gomock.Controller
	recorder *MockDemandMockRecorder
}

// MockDemandMockRecorder is the mock recorder for MockDemand
type MockDemandMockRecorder struct {
	mock *MockDemand
}

// NewMockDemand creates a new mock instance
func NewMockDemand(ctrl *gomock.Controller) *MockDemand {
	mock := &MockDemand{ctrl: ctrl}
	mock.recorder = &MockDemandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDemand) EXPECT() *MockDemandMockRecorder {
	return m.recorder
}

// CallRate mocks base method
func (m *MockDemand) CallRate() int {
	ret := m.ctrl.Call(m, "CallRate")
	ret0, _ := ret[0].(int)
	return ret0
}

// CallRate indicates an expected call of CallRate
func (mr *MockDemandMockRecorder) CallRate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRate", reflect.TypeOf((*MockDemand)(nil).CallRate))
}

// ExcludedSuppliers mocks base method
func (m *MockDemand) ExcludedSuppliers() []string {
	ret := m.ctrl.Call(m, "ExcludedSuppliers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExcludedSuppliers indicates an expected call of ExcludedSuppliers
func (mr *MockDemandMockRecorder) ExcludedSuppliers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludedSuppliers", reflect.TypeOf((*MockDemand)(nil).ExcludedSuppliers))
}

// Handicap mocks base method
func (m *MockDemand) Handicap() int64 {
	ret := m.ctrl.Call(m, "Handicap")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Handicap indicates an expected call of Handicap
func (mr *MockDemandMockRecorder) Handicap() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handicap", reflect.TypeOf((*MockDemand)(nil).Handicap))
}

// Name mocks base method
func (m *MockDemand) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDemandMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDemand)(nil).Name))
}

// Provide mocks base method
func (m *MockDemand) Provide(arg0 context.Context, arg1 exchange.BidRequest, arg2 chan exchange.BidResponse) {
	m.ctrl.Call(m, "Provide", arg0, arg1, arg2)
}

// Provide indicates an expected call of Provide
func (mr *MockDemandMockRecorder) Provide(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockDemand)(nil).Provide), arg0, arg1, arg2)
}

// Status mocks base method
func (m *MockDemand) Status(arg0 context.Context, arg1 http.ResponseWriter, arg2 *http.Request) {
	m.ctrl.Call(m, "Status", arg0, arg1, arg2)
}

// Status indicates an expected call of Status
func (mr *MockDemandMockRecorder) Status(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDemand)(nil).Status), arg0, arg1, arg2)
}

// TestMode mocks base method
func (m *MockDemand) TestMode() bool {
	ret := m.ctrl.Call(m, "TestMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TestMode indicates an expected call of TestMode
func (mr *MockDemandMockRecorder) TestMode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMode", reflect.TypeOf((*MockDemand)(nil).TestMode))
}

// WhiteListCountries mocks base method
func (m *MockDemand) WhiteListCountries() []string {
	ret := m.ctrl.Call(m, "WhiteListCountries")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WhiteListCountries indicates an expected call of WhiteListCountries
func (mr *MockDemandMockRecorder) WhiteListCountries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhiteListCountries", reflect.TypeOf((*MockDemand)(nil).WhiteListCountries))
}

// Win mocks base method
func (m *MockDemand) Win(arg0 context.Context, arg1 string, arg2 int64) {
	m.ctrl.Call(m, "Win", arg0, arg1, arg2)
}

// Win indicates an expected call of Win
func (mr *MockDemandMockRecorder) Win(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Win", reflect.TypeOf((*MockDemand)(nil).Win), arg0, arg1, arg2)
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Cat mocks base method
func (m *MockPublisher) Cat() []string {
	ret := m.ctrl.Call(m, "Cat")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Cat indicates an expected call of Cat
func (mr *MockPublisherMockRecorder) Cat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cat", reflect.TypeOf((*MockPublisher)(nil).Cat))
}

// Domain mocks base method
func (m *MockPublisher) Domain() string {
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain
func (mr *MockPublisherMockRecorder) Domain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockPublisher)(nil).Domain))
}

// ID mocks base method
func (m *MockPublisher) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPublisherMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPublisher)(nil).ID))
}

// Name mocks base method
func (m *MockPublisher) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPublisherMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPublisher)(nil).Name))
}

// MockLocation is a mock of Location interface
type MockLocation struct {
	ctrl     *gomock.Controller
	recorder *MockLocationMockRecorder
}

// MockLocationMockRecorder is the mock recorder for MockLocation
type MockLocationMockRecorder struct {
	mock *MockLocation
}

// NewMockLocation creates a new mock instance
func NewMockLocation(ctrl *gomock.Controller) *MockLocation {
	mock := &MockLocation{ctrl: ctrl}
	mock.recorder = &MockLocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocation) EXPECT() *MockLocationMockRecorder {
	return m.recorder
}

// Country mocks base method
func (m *MockLocation) Country() exchange.Country {
	ret := m.ctrl.Call(m, "Country")
	ret0, _ := ret[0].(exchange.Country)
	return ret0
}

// Country indicates an expected call of Country
func (mr *MockLocationMockRecorder) Country() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Country", reflect.TypeOf((*MockLocation)(nil).Country))
}

// ISP mocks base method
func (m *MockLocation) ISP() exchange.ISP {
	ret := m.ctrl.Call(m, "ISP")
	ret0, _ := ret[0].(exchange.ISP)
	return ret0
}

// ISP indicates an expected call of ISP
func (mr *MockLocationMockRecorder) ISP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ISP", reflect.TypeOf((*MockLocation)(nil).ISP))
}

// LatLon mocks base method
func (m *MockLocation) LatLon() exchange.LatLon {
	ret := m.ctrl.Call(m, "LatLon")
	ret0, _ := ret[0].(exchange.LatLon)
	return ret0
}

// LatLon indicates an expected call of LatLon
func (mr *MockLocationMockRecorder) LatLon() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatLon", reflect.TypeOf((*MockLocation)(nil).LatLon))
}

// Region mocks base method
func (m *MockLocation) Region() exchange.Region {
	ret := m.ctrl.Call(m, "Region")
	ret0, _ := ret[0].(exchange.Region)
	return ret0
}

// Region indicates an expected call of Region
func (mr *MockLocationMockRecorder) Region() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Region", reflect.TypeOf((*MockLocation)(nil).Region))
}

// MockSupplier is a mock of Supplier interface
type MockSupplier struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierMockRecorder
}

// MockSupplierMockRecorder is the mock recorder for MockSupplier
type MockSupplierMockRecorder struct {
	mock *MockSupplier
}

// NewMockSupplier creates a new mock instance
func NewMockSupplier(ctrl *gomock.Controller) *MockSupplier {
	mock := &MockSupplier{ctrl: ctrl}
	mock.recorder = &MockSupplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSupplier) EXPECT() *MockSupplierMockRecorder {
	return m.recorder
}

// ClickMode mocks base method
func (m *MockSupplier) ClickMode() exchange.SupplierClickMode {
	ret := m.ctrl.Call(m, "ClickMode")
	ret0, _ := ret[0].(exchange.SupplierClickMode)
	return ret0
}

// ClickMode indicates an expected call of ClickMode
func (mr *MockSupplierMockRecorder) ClickMode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickMode", reflect.TypeOf((*MockSupplier)(nil).ClickMode))
}

// ExcludedDemands mocks base method
func (m *MockSupplier) ExcludedDemands() []string {
	ret := m.ctrl.Call(m, "ExcludedDemands")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExcludedDemands indicates an expected call of ExcludedDemands
func (mr *MockSupplierMockRecorder) ExcludedDemands() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludedDemands", reflect.TypeOf((*MockSupplier)(nil).ExcludedDemands))
}

// FloorCPM mocks base method
func (m *MockSupplier) FloorCPM() int64 {
	ret := m.ctrl.Call(m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorCPM indicates an expected call of FloorCPM
func (mr *MockSupplierMockRecorder) FloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorCPM", reflect.TypeOf((*MockSupplier)(nil).FloorCPM))
}

// Name mocks base method
func (m *MockSupplier) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockSupplierMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSupplier)(nil).Name))
}

// Renderer mocks base method
func (m *MockSupplier) Renderer() exchange.Renderer {
	ret := m.ctrl.Call(m, "Renderer")
	ret0, _ := ret[0].(exchange.Renderer)
	return ret0
}

// Renderer indicates an expected call of Renderer
func (mr *MockSupplierMockRecorder) Renderer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Renderer", reflect.TypeOf((*MockSupplier)(nil).Renderer))
}

// Share mocks base method
func (m *MockSupplier) Share() int {
	ret := m.ctrl.Call(m, "Share")
	ret0, _ := ret[0].(int)
	return ret0
}

// Share indicates an expected call of Share
func (mr *MockSupplierMockRecorder) Share() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Share", reflect.TypeOf((*MockSupplier)(nil).Share))
}

// SoftFloorCPM mocks base method
func (m *MockSupplier) SoftFloorCPM() int64 {
	ret := m.ctrl.Call(m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPM indicates an expected call of SoftFloorCPM
func (mr *MockSupplierMockRecorder) SoftFloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftFloorCPM", reflect.TypeOf((*MockSupplier)(nil).SoftFloorCPM))
}

// TestMode mocks base method
func (m *MockSupplier) TestMode() bool {
	ret := m.ctrl.Call(m, "TestMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TestMode indicates an expected call of TestMode
func (mr *MockSupplierMockRecorder) TestMode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMode", reflect.TypeOf((*MockSupplier)(nil).TestMode))
}

// Type mocks base method
func (m *MockSupplier) Type() string {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockSupplierMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSupplier)(nil).Type))
}
