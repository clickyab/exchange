// Code generated by MockGen. DO NOT EDIT.
// Source: clickyab.com/exchange/octopus/exchange (interfaces: Impression,Demand,Publisher,Location,Supplier,BidResponse,Bid,AdDetail,BidRequest,Banner,Device,Inventory,Site,App,Native,User,Video)

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	context "context"
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"
	time "time"

	exchange "clickyab.com/exchange/octopus/exchange"
	gomock "github.com/golang/mock/gomock"
)

// MockImpression is a mock of Impression interface
type MockImpression struct {
	ctrl     *gomock.Controller
	recorder *MockImpressionMockRecorder
}

// MockImpressionMockRecorder is the mock recorder for MockImpression
type MockImpressionMockRecorder struct {
	mock *MockImpression
}

// NewMockImpression creates a new mock instance
func NewMockImpression(ctrl *gomock.Controller) *MockImpression {
	mock := &MockImpression{ctrl: ctrl}
	mock.recorder = &MockImpressionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImpression) EXPECT() *MockImpressionMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockImpression) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockImpressionMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockImpression)(nil).Attributes))
}

// Banner mocks base method
func (m *MockImpression) Banner() exchange.Banner {
	ret := m.ctrl.Call(m, "Banner")
	ret0, _ := ret[0].(exchange.Banner)
	return ret0
}

// Banner indicates an expected call of Banner
func (mr *MockImpressionMockRecorder) Banner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Banner", reflect.TypeOf((*MockImpression)(nil).Banner))
}

// BidFloor mocks base method
func (m *MockImpression) BidFloor() float64 {
	ret := m.ctrl.Call(m, "BidFloor")
	ret0, _ := ret[0].(float64)
	return ret0
}

// BidFloor indicates an expected call of BidFloor
func (mr *MockImpressionMockRecorder) BidFloor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BidFloor", reflect.TypeOf((*MockImpression)(nil).BidFloor))
}

// CID mocks base method
func (m *MockImpression) CID() string {
	ret := m.ctrl.Call(m, "CID")
	ret0, _ := ret[0].(string)
	return ret0
}

// CID indicates an expected call of CID
func (mr *MockImpressionMockRecorder) CID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CID", reflect.TypeOf((*MockImpression)(nil).CID))
}

// ID mocks base method
func (m *MockImpression) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockImpressionMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockImpression)(nil).ID))
}

// Native mocks base method
func (m *MockImpression) Native() exchange.Native {
	ret := m.ctrl.Call(m, "Native")
	ret0, _ := ret[0].(exchange.Native)
	return ret0
}

// Native indicates an expected call of Native
func (mr *MockImpressionMockRecorder) Native() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Native", reflect.TypeOf((*MockImpression)(nil).Native))
}

// Secure mocks base method
func (m *MockImpression) Secure() bool {
	ret := m.ctrl.Call(m, "Secure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Secure indicates an expected call of Secure
func (mr *MockImpressionMockRecorder) Secure() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secure", reflect.TypeOf((*MockImpression)(nil).Secure))
}

// Type mocks base method
func (m *MockImpression) Type() exchange.ImpressionType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(exchange.ImpressionType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockImpressionMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockImpression)(nil).Type))
}

// Video mocks base method
func (m *MockImpression) Video() exchange.Video {
	ret := m.ctrl.Call(m, "Video")
	ret0, _ := ret[0].(exchange.Video)
	return ret0
}

// Video indicates an expected call of Video
func (mr *MockImpressionMockRecorder) Video() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Video", reflect.TypeOf((*MockImpression)(nil).Video))
}

// MockDemand is a mock of Demand interface
type MockDemand struct {
	ctrl     *gomock.Controller
	recorder *MockDemandMockRecorder
}

// MockDemandMockRecorder is the mock recorder for MockDemand
type MockDemandMockRecorder struct {
	mock *MockDemand
}

// NewMockDemand creates a new mock instance
func NewMockDemand(ctrl *gomock.Controller) *MockDemand {
	mock := &MockDemand{ctrl: ctrl}
	mock.recorder = &MockDemandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDemand) EXPECT() *MockDemandMockRecorder {
	return m.recorder
}

// Bill mocks base method
func (m *MockDemand) Bill(arg0 context.Context, arg1 exchange.Bid) {
	m.ctrl.Call(m, "Bill", arg0, arg1)
}

// Bill indicates an expected call of Bill
func (mr *MockDemandMockRecorder) Bill(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bill", reflect.TypeOf((*MockDemand)(nil).Bill), arg0, arg1)
}

// CallRate mocks base method
func (m *MockDemand) CallRate() int {
	ret := m.ctrl.Call(m, "CallRate")
	ret0, _ := ret[0].(int)
	return ret0
}

// CallRate indicates an expected call of CallRate
func (mr *MockDemandMockRecorder) CallRate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRate", reflect.TypeOf((*MockDemand)(nil).CallRate))
}

// Client mocks base method
func (m *MockDemand) Client() *http.Client {
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockDemandMockRecorder) Client() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDemand)(nil).Client))
}

// EndPoint mocks base method
func (m *MockDemand) EndPoint() string {
	ret := m.ctrl.Call(m, "EndPoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// EndPoint indicates an expected call of EndPoint
func (mr *MockDemandMockRecorder) EndPoint() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndPoint", reflect.TypeOf((*MockDemand)(nil).EndPoint))
}

// ExcludedSuppliers mocks base method
func (m *MockDemand) ExcludedSuppliers() []string {
	ret := m.ctrl.Call(m, "ExcludedSuppliers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExcludedSuppliers indicates an expected call of ExcludedSuppliers
func (mr *MockDemandMockRecorder) ExcludedSuppliers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludedSuppliers", reflect.TypeOf((*MockDemand)(nil).ExcludedSuppliers))
}

// GetBidResponse mocks base method
func (m *MockDemand) GetBidResponse(arg0 context.Context, arg1 *http.Response, arg2 exchange.Supplier) (exchange.BidResponse, error) {
	ret := m.ctrl.Call(m, "GetBidResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(exchange.BidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidResponse indicates an expected call of GetBidResponse
func (mr *MockDemandMockRecorder) GetBidResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidResponse", reflect.TypeOf((*MockDemand)(nil).GetBidResponse), arg0, arg1, arg2)
}

// GetTimeout mocks base method
func (m *MockDemand) GetTimeout() time.Duration {
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout
func (mr *MockDemandMockRecorder) GetTimeout() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockDemand)(nil).GetTimeout))
}

// Handicap mocks base method
func (m *MockDemand) Handicap() int64 {
	ret := m.ctrl.Call(m, "Handicap")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Handicap indicates an expected call of Handicap
func (mr *MockDemandMockRecorder) Handicap() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handicap", reflect.TypeOf((*MockDemand)(nil).Handicap))
}

// HasLimits mocks base method
func (m *MockDemand) HasLimits() bool {
	ret := m.ctrl.Call(m, "HasLimits")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLimits indicates an expected call of HasLimits
func (mr *MockDemandMockRecorder) HasLimits() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLimits", reflect.TypeOf((*MockDemand)(nil).HasLimits))
}

// Name mocks base method
func (m *MockDemand) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDemandMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDemand)(nil).Name))
}

// Provide mocks base method
func (m *MockDemand) Provide(arg0 context.Context, arg1 exchange.BidRequest, arg2 chan exchange.BidResponse) {
	m.ctrl.Call(m, "Provide", arg0, arg1, arg2)
}

// Provide indicates an expected call of Provide
func (mr *MockDemandMockRecorder) Provide(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockDemand)(nil).Provide), arg0, arg1, arg2)
}

// RenderBidRequest mocks base method
func (m *MockDemand) RenderBidRequest(arg0 context.Context, arg1 io.Writer, arg2 exchange.BidRequest) http.Header {
	ret := m.ctrl.Call(m, "RenderBidRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// RenderBidRequest indicates an expected call of RenderBidRequest
func (mr *MockDemandMockRecorder) RenderBidRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderBidRequest", reflect.TypeOf((*MockDemand)(nil).RenderBidRequest), arg0, arg1, arg2)
}

// Status mocks base method
func (m *MockDemand) Status(arg0 context.Context, arg1 http.ResponseWriter, arg2 *http.Request) {
	m.ctrl.Call(m, "Status", arg0, arg1, arg2)
}

// Status indicates an expected call of Status
func (mr *MockDemandMockRecorder) Status(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDemand)(nil).Status), arg0, arg1, arg2)
}

// TestMode mocks base method
func (m *MockDemand) TestMode() bool {
	ret := m.ctrl.Call(m, "TestMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TestMode indicates an expected call of TestMode
func (mr *MockDemandMockRecorder) TestMode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMode", reflect.TypeOf((*MockDemand)(nil).TestMode))
}

// Type mocks base method
func (m *MockDemand) Type() exchange.DemandType {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(exchange.DemandType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockDemandMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDemand)(nil).Type))
}

// WhiteListCountries mocks base method
func (m *MockDemand) WhiteListCountries() []string {
	ret := m.ctrl.Call(m, "WhiteListCountries")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WhiteListCountries indicates an expected call of WhiteListCountries
func (mr *MockDemandMockRecorder) WhiteListCountries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhiteListCountries", reflect.TypeOf((*MockDemand)(nil).WhiteListCountries))
}

// Win mocks base method
func (m *MockDemand) Win(arg0 context.Context, arg1 exchange.Bid) {
	m.ctrl.Call(m, "Win", arg0, arg1)
}

// Win indicates an expected call of Win
func (mr *MockDemandMockRecorder) Win(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Win", reflect.TypeOf((*MockDemand)(nil).Win), arg0, arg1)
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockPublisher) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockPublisherMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockPublisher)(nil).Attributes))
}

// Cat mocks base method
func (m *MockPublisher) Cat() []string {
	ret := m.ctrl.Call(m, "Cat")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Cat indicates an expected call of Cat
func (mr *MockPublisherMockRecorder) Cat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cat", reflect.TypeOf((*MockPublisher)(nil).Cat))
}

// Domain mocks base method
func (m *MockPublisher) Domain() string {
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain
func (mr *MockPublisherMockRecorder) Domain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockPublisher)(nil).Domain))
}

// ID mocks base method
func (m *MockPublisher) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPublisherMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPublisher)(nil).ID))
}

// Name mocks base method
func (m *MockPublisher) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPublisherMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPublisher)(nil).Name))
}

// MockLocation is a mock of Location interface
type MockLocation struct {
	ctrl     *gomock.Controller
	recorder *MockLocationMockRecorder
}

// MockLocationMockRecorder is the mock recorder for MockLocation
type MockLocationMockRecorder struct {
	mock *MockLocation
}

// NewMockLocation creates a new mock instance
func NewMockLocation(ctrl *gomock.Controller) *MockLocation {
	mock := &MockLocation{ctrl: ctrl}
	mock.recorder = &MockLocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocation) EXPECT() *MockLocationMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockLocation) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockLocationMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockLocation)(nil).Attributes))
}

// Country mocks base method
func (m *MockLocation) Country() exchange.Country {
	ret := m.ctrl.Call(m, "Country")
	ret0, _ := ret[0].(exchange.Country)
	return ret0
}

// Country indicates an expected call of Country
func (mr *MockLocationMockRecorder) Country() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Country", reflect.TypeOf((*MockLocation)(nil).Country))
}

// ISP mocks base method
func (m *MockLocation) ISP() exchange.ISP {
	ret := m.ctrl.Call(m, "ISP")
	ret0, _ := ret[0].(exchange.ISP)
	return ret0
}

// ISP indicates an expected call of ISP
func (mr *MockLocationMockRecorder) ISP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ISP", reflect.TypeOf((*MockLocation)(nil).ISP))
}

// LatLon mocks base method
func (m *MockLocation) LatLon() exchange.LatLon {
	ret := m.ctrl.Call(m, "LatLon")
	ret0, _ := ret[0].(exchange.LatLon)
	return ret0
}

// LatLon indicates an expected call of LatLon
func (mr *MockLocationMockRecorder) LatLon() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatLon", reflect.TypeOf((*MockLocation)(nil).LatLon))
}

// Region mocks base method
func (m *MockLocation) Region() exchange.Region {
	ret := m.ctrl.Call(m, "Region")
	ret0, _ := ret[0].(exchange.Region)
	return ret0
}

// Region indicates an expected call of Region
func (mr *MockLocationMockRecorder) Region() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Region", reflect.TypeOf((*MockLocation)(nil).Region))
}

// MockSupplier is a mock of Supplier interface
type MockSupplier struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierMockRecorder
}

// MockSupplierMockRecorder is the mock recorder for MockSupplier
type MockSupplierMockRecorder struct {
	mock *MockSupplier
}

// NewMockSupplier creates a new mock instance
func NewMockSupplier(ctrl *gomock.Controller) *MockSupplier {
	mock := &MockSupplier{ctrl: ctrl}
	mock.recorder = &MockSupplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSupplier) EXPECT() *MockSupplierMockRecorder {
	return m.recorder
}

// ExcludedDemands mocks base method
func (m *MockSupplier) ExcludedDemands() []string {
	ret := m.ctrl.Call(m, "ExcludedDemands")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExcludedDemands indicates an expected call of ExcludedDemands
func (mr *MockSupplierMockRecorder) ExcludedDemands() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludedDemands", reflect.TypeOf((*MockSupplier)(nil).ExcludedDemands))
}

// FloorCPM mocks base method
func (m *MockSupplier) FloorCPM() int64 {
	ret := m.ctrl.Call(m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorCPM indicates an expected call of FloorCPM
func (mr *MockSupplierMockRecorder) FloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorCPM", reflect.TypeOf((*MockSupplier)(nil).FloorCPM))
}

// GetBidRequest mocks base method
func (m *MockSupplier) GetBidRequest(arg0 context.Context, arg1 *http.Request) (exchange.BidRequest, error) {
	ret := m.ctrl.Call(m, "GetBidRequest", arg0, arg1)
	ret0, _ := ret[0].(exchange.BidRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidRequest indicates an expected call of GetBidRequest
func (mr *MockSupplierMockRecorder) GetBidRequest(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidRequest", reflect.TypeOf((*MockSupplier)(nil).GetBidRequest), arg0, arg1)
}

// Name mocks base method
func (m *MockSupplier) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockSupplierMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSupplier)(nil).Name))
}

// RenderBidResponse mocks base method
func (m *MockSupplier) RenderBidResponse(arg0 context.Context, arg1 io.Writer, arg2 exchange.BidResponse) http.Header {
	ret := m.ctrl.Call(m, "RenderBidResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// RenderBidResponse indicates an expected call of RenderBidResponse
func (mr *MockSupplierMockRecorder) RenderBidResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderBidResponse", reflect.TypeOf((*MockSupplier)(nil).RenderBidResponse), arg0, arg1, arg2)
}

// Share mocks base method
func (m *MockSupplier) Share() int {
	ret := m.ctrl.Call(m, "Share")
	ret0, _ := ret[0].(int)
	return ret0
}

// Share indicates an expected call of Share
func (mr *MockSupplierMockRecorder) Share() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Share", reflect.TypeOf((*MockSupplier)(nil).Share))
}

// SoftFloorCPM mocks base method
func (m *MockSupplier) SoftFloorCPM() int64 {
	ret := m.ctrl.Call(m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPM indicates an expected call of SoftFloorCPM
func (mr *MockSupplierMockRecorder) SoftFloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftFloorCPM", reflect.TypeOf((*MockSupplier)(nil).SoftFloorCPM))
}

// TestMode mocks base method
func (m *MockSupplier) TestMode() bool {
	ret := m.ctrl.Call(m, "TestMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TestMode indicates an expected call of TestMode
func (mr *MockSupplierMockRecorder) TestMode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMode", reflect.TypeOf((*MockSupplier)(nil).TestMode))
}

// Type mocks base method
func (m *MockSupplier) Type() string {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockSupplierMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSupplier)(nil).Type))
}

// MockBidResponse is a mock of BidResponse interface
type MockBidResponse struct {
	ctrl     *gomock.Controller
	recorder *MockBidResponseMockRecorder
}

// MockBidResponseMockRecorder is the mock recorder for MockBidResponse
type MockBidResponseMockRecorder struct {
	mock *MockBidResponse
}

// NewMockBidResponse creates a new mock instance
func NewMockBidResponse(ctrl *gomock.Controller) *MockBidResponse {
	mock := &MockBidResponse{ctrl: ctrl}
	mock.recorder = &MockBidResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBidResponse) EXPECT() *MockBidResponseMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockBidResponse) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockBidResponseMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockBidResponse)(nil).Attributes))
}

// Bids mocks base method
func (m *MockBidResponse) Bids() []exchange.Bid {
	ret := m.ctrl.Call(m, "Bids")
	ret0, _ := ret[0].([]exchange.Bid)
	return ret0
}

// Bids indicates an expected call of Bids
func (mr *MockBidResponseMockRecorder) Bids() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bids", reflect.TypeOf((*MockBidResponse)(nil).Bids))
}

// Excuse mocks base method
func (m *MockBidResponse) Excuse() int {
	ret := m.ctrl.Call(m, "Excuse")
	ret0, _ := ret[0].(int)
	return ret0
}

// Excuse indicates an expected call of Excuse
func (mr *MockBidResponseMockRecorder) Excuse() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Excuse", reflect.TypeOf((*MockBidResponse)(nil).Excuse))
}

// ID mocks base method
func (m *MockBidResponse) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockBidResponseMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBidResponse)(nil).ID))
}

// Supplier mocks base method
func (m *MockBidResponse) Supplier() exchange.Supplier {
	ret := m.ctrl.Call(m, "Supplier")
	ret0, _ := ret[0].(exchange.Supplier)
	return ret0
}

// Supplier indicates an expected call of Supplier
func (mr *MockBidResponseMockRecorder) Supplier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supplier", reflect.TypeOf((*MockBidResponse)(nil).Supplier))
}

// MockBid is a mock of Bid interface
type MockBid struct {
	ctrl     *gomock.Controller
	recorder *MockBidMockRecorder
}

// MockBidMockRecorder is the mock recorder for MockBid
type MockBidMockRecorder struct {
	mock *MockBid
}

// NewMockBid creates a new mock instance
func NewMockBid(ctrl *gomock.Controller) *MockBid {
	mock := &MockBid{ctrl: ctrl}
	mock.recorder = &MockBidMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBid) EXPECT() *MockBidMockRecorder {
	return m.recorder
}

// AdDomains mocks base method
func (m *MockBid) AdDomains() []string {
	ret := m.ctrl.Call(m, "AdDomains")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AdDomains indicates an expected call of AdDomains
func (mr *MockBidMockRecorder) AdDomains() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdDomains", reflect.TypeOf((*MockBid)(nil).AdDomains))
}

// AdHeight mocks base method
func (m *MockBid) AdHeight() int {
	ret := m.ctrl.Call(m, "AdHeight")
	ret0, _ := ret[0].(int)
	return ret0
}

// AdHeight indicates an expected call of AdHeight
func (mr *MockBidMockRecorder) AdHeight() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdHeight", reflect.TypeOf((*MockBid)(nil).AdHeight))
}

// AdID mocks base method
func (m *MockBid) AdID() string {
	ret := m.ctrl.Call(m, "AdID")
	ret0, _ := ret[0].(string)
	return ret0
}

// AdID indicates an expected call of AdID
func (mr *MockBidMockRecorder) AdID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdID", reflect.TypeOf((*MockBid)(nil).AdID))
}

// AdMarkup mocks base method
func (m *MockBid) AdMarkup() string {
	ret := m.ctrl.Call(m, "AdMarkup")
	ret0, _ := ret[0].(string)
	return ret0
}

// AdMarkup indicates an expected call of AdMarkup
func (mr *MockBidMockRecorder) AdMarkup() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdMarkup", reflect.TypeOf((*MockBid)(nil).AdMarkup))
}

// AdWidth mocks base method
func (m *MockBid) AdWidth() int {
	ret := m.ctrl.Call(m, "AdWidth")
	ret0, _ := ret[0].(int)
	return ret0
}

// AdWidth indicates an expected call of AdWidth
func (mr *MockBidMockRecorder) AdWidth() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdWidth", reflect.TypeOf((*MockBid)(nil).AdWidth))
}

// Attributes mocks base method
func (m *MockBid) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockBidMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockBid)(nil).Attributes))
}

// BillURL mocks base method
func (m *MockBid) BillURL() string {
	ret := m.ctrl.Call(m, "BillURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// BillURL indicates an expected call of BillURL
func (mr *MockBidMockRecorder) BillURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillURL", reflect.TypeOf((*MockBid)(nil).BillURL))
}

// Categories mocks base method
func (m *MockBid) Categories() []string {
	ret := m.ctrl.Call(m, "Categories")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Categories indicates an expected call of Categories
func (mr *MockBidMockRecorder) Categories() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Categories", reflect.TypeOf((*MockBid)(nil).Categories))
}

// Demand mocks base method
func (m *MockBid) Demand() exchange.Demand {
	ret := m.ctrl.Call(m, "Demand")
	ret0, _ := ret[0].(exchange.Demand)
	return ret0
}

// Demand indicates an expected call of Demand
func (mr *MockBidMockRecorder) Demand() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Demand", reflect.TypeOf((*MockBid)(nil).Demand))
}

// ID mocks base method
func (m *MockBid) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockBidMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBid)(nil).ID))
}

// ImpID mocks base method
func (m *MockBid) ImpID() string {
	ret := m.ctrl.Call(m, "ImpID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ImpID indicates an expected call of ImpID
func (mr *MockBidMockRecorder) ImpID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImpID", reflect.TypeOf((*MockBid)(nil).ImpID))
}

// Price mocks base method
func (m *MockBid) Price() int64 {
	ret := m.ctrl.Call(m, "Price")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Price indicates an expected call of Price
func (mr *MockBidMockRecorder) Price() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Price", reflect.TypeOf((*MockBid)(nil).Price))
}

// WinURL mocks base method
func (m *MockBid) WinURL() string {
	ret := m.ctrl.Call(m, "WinURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// WinURL indicates an expected call of WinURL
func (mr *MockBidMockRecorder) WinURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WinURL", reflect.TypeOf((*MockBid)(nil).WinURL))
}

// MockAdDetail is a mock of AdDetail interface
type MockAdDetail struct {
	ctrl     *gomock.Controller
	recorder *MockAdDetailMockRecorder
}

// MockAdDetailMockRecorder is the mock recorder for MockAdDetail
type MockAdDetailMockRecorder struct {
	mock *MockAdDetail
}

// NewMockAdDetail creates a new mock instance
func NewMockAdDetail(ctrl *gomock.Controller) *MockAdDetail {
	mock := &MockAdDetail{ctrl: ctrl}
	mock.recorder = &MockAdDetailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdDetail) EXPECT() *MockAdDetailMockRecorder {
	return m.recorder
}

// AdDomains mocks base method
func (m *MockAdDetail) AdDomains() []string {
	ret := m.ctrl.Call(m, "AdDomains")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AdDomains indicates an expected call of AdDomains
func (mr *MockAdDetailMockRecorder) AdDomains() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdDomains", reflect.TypeOf((*MockAdDetail)(nil).AdDomains))
}

// AdHeight mocks base method
func (m *MockAdDetail) AdHeight() int {
	ret := m.ctrl.Call(m, "AdHeight")
	ret0, _ := ret[0].(int)
	return ret0
}

// AdHeight indicates an expected call of AdHeight
func (mr *MockAdDetailMockRecorder) AdHeight() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdHeight", reflect.TypeOf((*MockAdDetail)(nil).AdHeight))
}

// AdID mocks base method
func (m *MockAdDetail) AdID() string {
	ret := m.ctrl.Call(m, "AdID")
	ret0, _ := ret[0].(string)
	return ret0
}

// AdID indicates an expected call of AdID
func (mr *MockAdDetailMockRecorder) AdID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdID", reflect.TypeOf((*MockAdDetail)(nil).AdID))
}

// AdMarkup mocks base method
func (m *MockAdDetail) AdMarkup() string {
	ret := m.ctrl.Call(m, "AdMarkup")
	ret0, _ := ret[0].(string)
	return ret0
}

// AdMarkup indicates an expected call of AdMarkup
func (mr *MockAdDetailMockRecorder) AdMarkup() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdMarkup", reflect.TypeOf((*MockAdDetail)(nil).AdMarkup))
}

// AdWidth mocks base method
func (m *MockAdDetail) AdWidth() int {
	ret := m.ctrl.Call(m, "AdWidth")
	ret0, _ := ret[0].(int)
	return ret0
}

// AdWidth indicates an expected call of AdWidth
func (mr *MockAdDetailMockRecorder) AdWidth() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdWidth", reflect.TypeOf((*MockAdDetail)(nil).AdWidth))
}

// MockBidRequest is a mock of BidRequest interface
type MockBidRequest struct {
	ctrl     *gomock.Controller
	recorder *MockBidRequestMockRecorder
}

// MockBidRequestMockRecorder is the mock recorder for MockBidRequest
type MockBidRequestMockRecorder struct {
	mock *MockBidRequest
}

// NewMockBidRequest creates a new mock instance
func NewMockBidRequest(ctrl *gomock.Controller) *MockBidRequest {
	mock := &MockBidRequest{ctrl: ctrl}
	mock.recorder = &MockBidRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBidRequest) EXPECT() *MockBidRequestMockRecorder {
	return m.recorder
}

// AllowedLanguage mocks base method
func (m *MockBidRequest) AllowedLanguage() []string {
	ret := m.ctrl.Call(m, "AllowedLanguage")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AllowedLanguage indicates an expected call of AllowedLanguage
func (mr *MockBidRequestMockRecorder) AllowedLanguage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowedLanguage", reflect.TypeOf((*MockBidRequest)(nil).AllowedLanguage))
}

// Attributes mocks base method
func (m *MockBidRequest) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockBidRequestMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockBidRequest)(nil).Attributes))
}

// AuctionType mocks base method
func (m *MockBidRequest) AuctionType() exchange.AuctionType {
	ret := m.ctrl.Call(m, "AuctionType")
	ret0, _ := ret[0].(exchange.AuctionType)
	return ret0
}

// AuctionType indicates an expected call of AuctionType
func (mr *MockBidRequestMockRecorder) AuctionType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuctionType", reflect.TypeOf((*MockBidRequest)(nil).AuctionType))
}

// BlackList mocks base method
func (m *MockBidRequest) BlackList() []string {
	ret := m.ctrl.Call(m, "BlackList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BlackList indicates an expected call of BlackList
func (mr *MockBidRequestMockRecorder) BlackList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlackList", reflect.TypeOf((*MockBidRequest)(nil).BlackList))
}

// BlockedAdvertiserDomain mocks base method
func (m *MockBidRequest) BlockedAdvertiserDomain() []string {
	ret := m.ctrl.Call(m, "BlockedAdvertiserDomain")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BlockedAdvertiserDomain indicates an expected call of BlockedAdvertiserDomain
func (mr *MockBidRequestMockRecorder) BlockedAdvertiserDomain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockedAdvertiserDomain", reflect.TypeOf((*MockBidRequest)(nil).BlockedAdvertiserDomain))
}

// BlockedCategories mocks base method
func (m *MockBidRequest) BlockedCategories() []string {
	ret := m.ctrl.Call(m, "BlockedCategories")
	ret0, _ := ret[0].([]string)
	return ret0
}

// BlockedCategories indicates an expected call of BlockedCategories
func (mr *MockBidRequestMockRecorder) BlockedCategories() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockedCategories", reflect.TypeOf((*MockBidRequest)(nil).BlockedCategories))
}

// CID mocks base method
func (m *MockBidRequest) CID() string {
	ret := m.ctrl.Call(m, "CID")
	ret0, _ := ret[0].(string)
	return ret0
}

// CID indicates an expected call of CID
func (mr *MockBidRequestMockRecorder) CID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CID", reflect.TypeOf((*MockBidRequest)(nil).CID))
}

// Device mocks base method
func (m *MockBidRequest) Device() exchange.Device {
	ret := m.ctrl.Call(m, "Device")
	ret0, _ := ret[0].(exchange.Device)
	return ret0
}

// Device indicates an expected call of Device
func (mr *MockBidRequestMockRecorder) Device() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Device", reflect.TypeOf((*MockBidRequest)(nil).Device))
}

// ID mocks base method
func (m *MockBidRequest) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockBidRequestMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBidRequest)(nil).ID))
}

// Imp mocks base method
func (m *MockBidRequest) Imp() []exchange.Impression {
	ret := m.ctrl.Call(m, "Imp")
	ret0, _ := ret[0].([]exchange.Impression)
	return ret0
}

// Imp indicates an expected call of Imp
func (mr *MockBidRequestMockRecorder) Imp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Imp", reflect.TypeOf((*MockBidRequest)(nil).Imp))
}

// Inventory mocks base method
func (m *MockBidRequest) Inventory() exchange.Inventory {
	ret := m.ctrl.Call(m, "Inventory")
	ret0, _ := ret[0].(exchange.Inventory)
	return ret0
}

// Inventory indicates an expected call of Inventory
func (mr *MockBidRequestMockRecorder) Inventory() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inventory", reflect.TypeOf((*MockBidRequest)(nil).Inventory))
}

// TMax mocks base method
func (m *MockBidRequest) TMax() time.Duration {
	ret := m.ctrl.Call(m, "TMax")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TMax indicates an expected call of TMax
func (mr *MockBidRequestMockRecorder) TMax() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TMax", reflect.TypeOf((*MockBidRequest)(nil).TMax))
}

// Test mocks base method
func (m *MockBidRequest) Test() bool {
	ret := m.ctrl.Call(m, "Test")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Test indicates an expected call of Test
func (mr *MockBidRequestMockRecorder) Test() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockBidRequest)(nil).Test))
}

// Time mocks base method
func (m *MockBidRequest) Time() time.Time {
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time
func (mr *MockBidRequestMockRecorder) Time() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockBidRequest)(nil).Time))
}

// URL mocks base method
func (m *MockBidRequest) URL() *url.URL {
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// URL indicates an expected call of URL
func (mr *MockBidRequestMockRecorder) URL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockBidRequest)(nil).URL))
}

// User mocks base method
func (m *MockBidRequest) User() exchange.User {
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(exchange.User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockBidRequestMockRecorder) User() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockBidRequest)(nil).User))
}

// WhiteList mocks base method
func (m *MockBidRequest) WhiteList() []string {
	ret := m.ctrl.Call(m, "WhiteList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WhiteList indicates an expected call of WhiteList
func (mr *MockBidRequestMockRecorder) WhiteList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhiteList", reflect.TypeOf((*MockBidRequest)(nil).WhiteList))
}

// MockBanner is a mock of Banner interface
type MockBanner struct {
	ctrl     *gomock.Controller
	recorder *MockBannerMockRecorder
}

// MockBannerMockRecorder is the mock recorder for MockBanner
type MockBannerMockRecorder struct {
	mock *MockBanner
}

// NewMockBanner creates a new mock instance
func NewMockBanner(ctrl *gomock.Controller) *MockBanner {
	mock := &MockBanner{ctrl: ctrl}
	mock.recorder = &MockBannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBanner) EXPECT() *MockBannerMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockBanner) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockBannerMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockBanner)(nil).Attributes))
}

// BlockedAttributes mocks base method
func (m *MockBanner) BlockedAttributes() []exchange.CreativeAttribute {
	ret := m.ctrl.Call(m, "BlockedAttributes")
	ret0, _ := ret[0].([]exchange.CreativeAttribute)
	return ret0
}

// BlockedAttributes indicates an expected call of BlockedAttributes
func (mr *MockBannerMockRecorder) BlockedAttributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockedAttributes", reflect.TypeOf((*MockBanner)(nil).BlockedAttributes))
}

// BlockedTypes mocks base method
func (m *MockBanner) BlockedTypes() []exchange.BannerType {
	ret := m.ctrl.Call(m, "BlockedTypes")
	ret0, _ := ret[0].([]exchange.BannerType)
	return ret0
}

// BlockedTypes indicates an expected call of BlockedTypes
func (mr *MockBannerMockRecorder) BlockedTypes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockedTypes", reflect.TypeOf((*MockBanner)(nil).BlockedTypes))
}

// Height mocks base method
func (m *MockBanner) Height() int {
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (mr *MockBannerMockRecorder) Height() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockBanner)(nil).Height))
}

// ID mocks base method
func (m *MockBanner) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockBannerMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBanner)(nil).ID))
}

// Mimes mocks base method
func (m *MockBanner) Mimes() []string {
	ret := m.ctrl.Call(m, "Mimes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Mimes indicates an expected call of Mimes
func (mr *MockBannerMockRecorder) Mimes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mimes", reflect.TypeOf((*MockBanner)(nil).Mimes))
}

// Width mocks base method
func (m *MockBanner) Width() int {
	ret := m.ctrl.Call(m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (mr *MockBannerMockRecorder) Width() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockBanner)(nil).Width))
}

// MockDevice is a mock of Device interface
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockDevice) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockDeviceMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockDevice)(nil).Attributes))
}

// CID mocks base method
func (m *MockDevice) CID() string {
	ret := m.ctrl.Call(m, "CID")
	ret0, _ := ret[0].(string)
	return ret0
}

// CID indicates an expected call of CID
func (mr *MockDeviceMockRecorder) CID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CID", reflect.TypeOf((*MockDevice)(nil).CID))
}

// Carrier mocks base method
func (m *MockDevice) Carrier() string {
	ret := m.ctrl.Call(m, "Carrier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Carrier indicates an expected call of Carrier
func (mr *MockDeviceMockRecorder) Carrier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Carrier", reflect.TypeOf((*MockDevice)(nil).Carrier))
}

// ConnType mocks base method
func (m *MockDevice) ConnType() exchange.ConnectionType {
	ret := m.ctrl.Call(m, "ConnType")
	ret0, _ := ret[0].(exchange.ConnectionType)
	return ret0
}

// ConnType indicates an expected call of ConnType
func (mr *MockDeviceMockRecorder) ConnType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnType", reflect.TypeOf((*MockDevice)(nil).ConnType))
}

// DeviceType mocks base method
func (m *MockDevice) DeviceType() exchange.DeviceType {
	ret := m.ctrl.Call(m, "DeviceType")
	ret0, _ := ret[0].(exchange.DeviceType)
	return ret0
}

// DeviceType indicates an expected call of DeviceType
func (mr *MockDeviceMockRecorder) DeviceType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceType", reflect.TypeOf((*MockDevice)(nil).DeviceType))
}

// Geo mocks base method
func (m *MockDevice) Geo() exchange.Geo {
	ret := m.ctrl.Call(m, "Geo")
	ret0, _ := ret[0].(exchange.Geo)
	return ret0
}

// Geo indicates an expected call of Geo
func (mr *MockDeviceMockRecorder) Geo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Geo", reflect.TypeOf((*MockDevice)(nil).Geo))
}

// IP mocks base method
func (m *MockDevice) IP() string {
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(string)
	return ret0
}

// IP indicates an expected call of IP
func (mr *MockDeviceMockRecorder) IP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockDevice)(nil).IP))
}

// LAC mocks base method
func (m *MockDevice) LAC() string {
	ret := m.ctrl.Call(m, "LAC")
	ret0, _ := ret[0].(string)
	return ret0
}

// LAC indicates an expected call of LAC
func (mr *MockDeviceMockRecorder) LAC() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LAC", reflect.TypeOf((*MockDevice)(nil).LAC))
}

// Language mocks base method
func (m *MockDevice) Language() string {
	ret := m.ctrl.Call(m, "Language")
	ret0, _ := ret[0].(string)
	return ret0
}

// Language indicates an expected call of Language
func (mr *MockDeviceMockRecorder) Language() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Language", reflect.TypeOf((*MockDevice)(nil).Language))
}

// MCC mocks base method
func (m *MockDevice) MCC() string {
	ret := m.ctrl.Call(m, "MCC")
	ret0, _ := ret[0].(string)
	return ret0
}

// MCC indicates an expected call of MCC
func (mr *MockDeviceMockRecorder) MCC() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCC", reflect.TypeOf((*MockDevice)(nil).MCC))
}

// MNC mocks base method
func (m *MockDevice) MNC() string {
	ret := m.ctrl.Call(m, "MNC")
	ret0, _ := ret[0].(string)
	return ret0
}

// MNC indicates an expected call of MNC
func (mr *MockDeviceMockRecorder) MNC() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MNC", reflect.TypeOf((*MockDevice)(nil).MNC))
}

// Make mocks base method
func (m *MockDevice) Make() string {
	ret := m.ctrl.Call(m, "Make")
	ret0, _ := ret[0].(string)
	return ret0
}

// Make indicates an expected call of Make
func (mr *MockDeviceMockRecorder) Make() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockDevice)(nil).Make))
}

// Model mocks base method
func (m *MockDevice) Model() string {
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(string)
	return ret0
}

// Model indicates an expected call of Model
func (mr *MockDeviceMockRecorder) Model() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDevice)(nil).Model))
}

// OS mocks base method
func (m *MockDevice) OS() string {
	ret := m.ctrl.Call(m, "OS")
	ret0, _ := ret[0].(string)
	return ret0
}

// OS indicates an expected call of OS
func (mr *MockDeviceMockRecorder) OS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OS", reflect.TypeOf((*MockDevice)(nil).OS))
}

// UserAgent mocks base method
func (m *MockDevice) UserAgent() string {
	ret := m.ctrl.Call(m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserAgent indicates an expected call of UserAgent
func (mr *MockDeviceMockRecorder) UserAgent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAgent", reflect.TypeOf((*MockDevice)(nil).UserAgent))
}

// MockInventory is a mock of Inventory interface
type MockInventory struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryMockRecorder
}

// MockInventoryMockRecorder is the mock recorder for MockInventory
type MockInventoryMockRecorder struct {
	mock *MockInventory
}

// NewMockInventory creates a new mock instance
func NewMockInventory(ctrl *gomock.Controller) *MockInventory {
	mock := &MockInventory{ctrl: ctrl}
	mock.recorder = &MockInventoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInventory) EXPECT() *MockInventoryMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockInventory) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockInventoryMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockInventory)(nil).Attributes))
}

// Cat mocks base method
func (m *MockInventory) Cat() []exchange.Category {
	ret := m.ctrl.Call(m, "Cat")
	ret0, _ := ret[0].([]exchange.Category)
	return ret0
}

// Cat indicates an expected call of Cat
func (mr *MockInventoryMockRecorder) Cat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cat", reflect.TypeOf((*MockInventory)(nil).Cat))
}

// Domain mocks base method
func (m *MockInventory) Domain() string {
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain
func (mr *MockInventoryMockRecorder) Domain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockInventory)(nil).Domain))
}

// FloorCPM mocks base method
func (m *MockInventory) FloorCPM() int64 {
	ret := m.ctrl.Call(m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorCPM indicates an expected call of FloorCPM
func (mr *MockInventoryMockRecorder) FloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorCPM", reflect.TypeOf((*MockInventory)(nil).FloorCPM))
}

// ID mocks base method
func (m *MockInventory) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockInventoryMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockInventory)(nil).ID))
}

// Name mocks base method
func (m *MockInventory) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockInventoryMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInventory)(nil).Name))
}

// Publisher mocks base method
func (m *MockInventory) Publisher() exchange.Publisher {
	ret := m.ctrl.Call(m, "Publisher")
	ret0, _ := ret[0].(exchange.Publisher)
	return ret0
}

// Publisher indicates an expected call of Publisher
func (mr *MockInventoryMockRecorder) Publisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publisher", reflect.TypeOf((*MockInventory)(nil).Publisher))
}

// SoftFloorCPM mocks base method
func (m *MockInventory) SoftFloorCPM() int64 {
	ret := m.ctrl.Call(m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPM indicates an expected call of SoftFloorCPM
func (mr *MockInventoryMockRecorder) SoftFloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftFloorCPM", reflect.TypeOf((*MockInventory)(nil).SoftFloorCPM))
}

// Supplier mocks base method
func (m *MockInventory) Supplier() exchange.Supplier {
	ret := m.ctrl.Call(m, "Supplier")
	ret0, _ := ret[0].(exchange.Supplier)
	return ret0
}

// Supplier indicates an expected call of Supplier
func (mr *MockInventoryMockRecorder) Supplier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supplier", reflect.TypeOf((*MockInventory)(nil).Supplier))
}

// MockSite is a mock of Site interface
type MockSite struct {
	ctrl     *gomock.Controller
	recorder *MockSiteMockRecorder
}

// MockSiteMockRecorder is the mock recorder for MockSite
type MockSiteMockRecorder struct {
	mock *MockSite
}

// NewMockSite creates a new mock instance
func NewMockSite(ctrl *gomock.Controller) *MockSite {
	mock := &MockSite{ctrl: ctrl}
	mock.recorder = &MockSiteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSite) EXPECT() *MockSiteMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockSite) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockSiteMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockSite)(nil).Attributes))
}

// Cat mocks base method
func (m *MockSite) Cat() []exchange.Category {
	ret := m.ctrl.Call(m, "Cat")
	ret0, _ := ret[0].([]exchange.Category)
	return ret0
}

// Cat indicates an expected call of Cat
func (mr *MockSiteMockRecorder) Cat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cat", reflect.TypeOf((*MockSite)(nil).Cat))
}

// Domain mocks base method
func (m *MockSite) Domain() string {
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain
func (mr *MockSiteMockRecorder) Domain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockSite)(nil).Domain))
}

// FloorCPM mocks base method
func (m *MockSite) FloorCPM() int64 {
	ret := m.ctrl.Call(m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorCPM indicates an expected call of FloorCPM
func (mr *MockSiteMockRecorder) FloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorCPM", reflect.TypeOf((*MockSite)(nil).FloorCPM))
}

// ID mocks base method
func (m *MockSite) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockSiteMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSite)(nil).ID))
}

// Name mocks base method
func (m *MockSite) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockSiteMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSite)(nil).Name))
}

// Page mocks base method
func (m *MockSite) Page() string {
	ret := m.ctrl.Call(m, "Page")
	ret0, _ := ret[0].(string)
	return ret0
}

// Page indicates an expected call of Page
func (mr *MockSiteMockRecorder) Page() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Page", reflect.TypeOf((*MockSite)(nil).Page))
}

// Publisher mocks base method
func (m *MockSite) Publisher() exchange.Publisher {
	ret := m.ctrl.Call(m, "Publisher")
	ret0, _ := ret[0].(exchange.Publisher)
	return ret0
}

// Publisher indicates an expected call of Publisher
func (mr *MockSiteMockRecorder) Publisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publisher", reflect.TypeOf((*MockSite)(nil).Publisher))
}

// Ref mocks base method
func (m *MockSite) Ref() string {
	ret := m.ctrl.Call(m, "Ref")
	ret0, _ := ret[0].(string)
	return ret0
}

// Ref indicates an expected call of Ref
func (mr *MockSiteMockRecorder) Ref() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockSite)(nil).Ref))
}

// SoftFloorCPM mocks base method
func (m *MockSite) SoftFloorCPM() int64 {
	ret := m.ctrl.Call(m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPM indicates an expected call of SoftFloorCPM
func (mr *MockSiteMockRecorder) SoftFloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftFloorCPM", reflect.TypeOf((*MockSite)(nil).SoftFloorCPM))
}

// Supplier mocks base method
func (m *MockSite) Supplier() exchange.Supplier {
	ret := m.ctrl.Call(m, "Supplier")
	ret0, _ := ret[0].(exchange.Supplier)
	return ret0
}

// Supplier indicates an expected call of Supplier
func (mr *MockSiteMockRecorder) Supplier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supplier", reflect.TypeOf((*MockSite)(nil).Supplier))
}

// MockApp is a mock of App interface
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockApp) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockAppMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockApp)(nil).Attributes))
}

// Bundle mocks base method
func (m *MockApp) Bundle() string {
	ret := m.ctrl.Call(m, "Bundle")
	ret0, _ := ret[0].(string)
	return ret0
}

// Bundle indicates an expected call of Bundle
func (mr *MockAppMockRecorder) Bundle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bundle", reflect.TypeOf((*MockApp)(nil).Bundle))
}

// Cat mocks base method
func (m *MockApp) Cat() []exchange.Category {
	ret := m.ctrl.Call(m, "Cat")
	ret0, _ := ret[0].([]exchange.Category)
	return ret0
}

// Cat indicates an expected call of Cat
func (mr *MockAppMockRecorder) Cat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cat", reflect.TypeOf((*MockApp)(nil).Cat))
}

// Domain mocks base method
func (m *MockApp) Domain() string {
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Domain indicates an expected call of Domain
func (mr *MockAppMockRecorder) Domain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockApp)(nil).Domain))
}

// FloorCPM mocks base method
func (m *MockApp) FloorCPM() int64 {
	ret := m.ctrl.Call(m, "FloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// FloorCPM indicates an expected call of FloorCPM
func (mr *MockAppMockRecorder) FloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorCPM", reflect.TypeOf((*MockApp)(nil).FloorCPM))
}

// ID mocks base method
func (m *MockApp) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockAppMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockApp)(nil).ID))
}

// Name mocks base method
func (m *MockApp) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockAppMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockApp)(nil).Name))
}

// Publisher mocks base method
func (m *MockApp) Publisher() exchange.Publisher {
	ret := m.ctrl.Call(m, "Publisher")
	ret0, _ := ret[0].(exchange.Publisher)
	return ret0
}

// Publisher indicates an expected call of Publisher
func (mr *MockAppMockRecorder) Publisher() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publisher", reflect.TypeOf((*MockApp)(nil).Publisher))
}

// SoftFloorCPM mocks base method
func (m *MockApp) SoftFloorCPM() int64 {
	ret := m.ctrl.Call(m, "SoftFloorCPM")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SoftFloorCPM indicates an expected call of SoftFloorCPM
func (mr *MockAppMockRecorder) SoftFloorCPM() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftFloorCPM", reflect.TypeOf((*MockApp)(nil).SoftFloorCPM))
}

// Supplier mocks base method
func (m *MockApp) Supplier() exchange.Supplier {
	ret := m.ctrl.Call(m, "Supplier")
	ret0, _ := ret[0].(exchange.Supplier)
	return ret0
}

// Supplier indicates an expected call of Supplier
func (mr *MockAppMockRecorder) Supplier() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supplier", reflect.TypeOf((*MockApp)(nil).Supplier))
}

// MockNative is a mock of Native interface
type MockNative struct {
	ctrl     *gomock.Controller
	recorder *MockNativeMockRecorder
}

// MockNativeMockRecorder is the mock recorder for MockNative
type MockNativeMockRecorder struct {
	mock *MockNative
}

// NewMockNative creates a new mock instance
func NewMockNative(ctrl *gomock.Controller) *MockNative {
	mock := &MockNative{ctrl: ctrl}
	mock.recorder = &MockNativeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNative) EXPECT() *MockNativeMockRecorder {
	return m.recorder
}

// AdLength mocks base method
func (m *MockNative) AdLength() int {
	ret := m.ctrl.Call(m, "AdLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// AdLength indicates an expected call of AdLength
func (mr *MockNativeMockRecorder) AdLength() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdLength", reflect.TypeOf((*MockNative)(nil).AdLength))
}

// Attributes mocks base method
func (m *MockNative) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockNativeMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockNative)(nil).Attributes))
}

// IsExtValid mocks base method
func (m *MockNative) IsExtValid() bool {
	ret := m.ctrl.Call(m, "IsExtValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExtValid indicates an expected call of IsExtValid
func (mr *MockNativeMockRecorder) IsExtValid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExtValid", reflect.TypeOf((*MockNative)(nil).IsExtValid))
}

// Request mocks base method
func (m *MockNative) Request() []byte {
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Request indicates an expected call of Request
func (mr *MockNativeMockRecorder) Request() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockNative)(nil).Request))
}

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockUser) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockUserMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockUser)(nil).Attributes))
}

// ID mocks base method
func (m *MockUser) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockUserMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockUser)(nil).ID))
}

// MockVideo is a mock of Video interface
type MockVideo struct {
	ctrl     *gomock.Controller
	recorder *MockVideoMockRecorder
}

// MockVideoMockRecorder is the mock recorder for MockVideo
type MockVideoMockRecorder struct {
	mock *MockVideo
}

// NewMockVideo creates a new mock instance
func NewMockVideo(ctrl *gomock.Controller) *MockVideo {
	mock := &MockVideo{ctrl: ctrl}
	mock.recorder = &MockVideoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVideo) EXPECT() *MockVideoMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockVideo) Attributes() map[string]interface{} {
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockVideoMockRecorder) Attributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockVideo)(nil).Attributes))
}

// BlockedAttributes mocks base method
func (m *MockVideo) BlockedAttributes() []exchange.CreativeAttribute {
	ret := m.ctrl.Call(m, "BlockedAttributes")
	ret0, _ := ret[0].([]exchange.CreativeAttribute)
	return ret0
}

// BlockedAttributes indicates an expected call of BlockedAttributes
func (mr *MockVideoMockRecorder) BlockedAttributes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockedAttributes", reflect.TypeOf((*MockVideo)(nil).BlockedAttributes))
}

// Height mocks base method
func (m *MockVideo) Height() int {
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height
func (mr *MockVideoMockRecorder) Height() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockVideo)(nil).Height))
}

// Linearity mocks base method
func (m *MockVideo) Linearity() bool {
	ret := m.ctrl.Call(m, "Linearity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Linearity indicates an expected call of Linearity
func (mr *MockVideoMockRecorder) Linearity() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Linearity", reflect.TypeOf((*MockVideo)(nil).Linearity))
}

// Mimes mocks base method
func (m *MockVideo) Mimes() []string {
	ret := m.ctrl.Call(m, "Mimes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Mimes indicates an expected call of Mimes
func (mr *MockVideoMockRecorder) Mimes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mimes", reflect.TypeOf((*MockVideo)(nil).Mimes))
}

// Width mocks base method
func (m *MockVideo) Width() int {
	ret := m.ctrl.Call(m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width
func (mr *MockVideoMockRecorder) Width() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockVideo)(nil).Width))
}
